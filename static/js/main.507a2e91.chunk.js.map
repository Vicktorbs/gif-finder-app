{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifFinderApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","className","getGif","category","a","url","encodeURI","fetch","anwer","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","href","rel","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","console","log","image","key","GifFinderApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"oMA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAIlB,UACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,UAiBnB,mBAAGG,UAAU,UAAb,SAAyBZ,Q,8BCvBxBa,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACG,GACfC,EAFY,iDAEsCC,UAAUH,GAFhD,kBACG,GADH,sDAGEI,MAAMF,GAHR,cAGZG,EAHY,gBAIKA,EAAMC,OAJX,uBAIVC,EAJU,EAIVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAaXM,GAbW,4CAAH,sDCGNO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,mBAAGc,KAAOd,EAAML,OAAO,SAASoB,IAAI,aAAanB,UAAU,uBAA3D,SACI,sBAAKA,UAAU,oCAAf,UACI,qBAAKoB,IAAMhB,EAAMiB,IAAMP,IACvB,4BAAKA,UCHRQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAGtB,ECJwB,SAACA,GACzB,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNzB,EAAOC,GAAUyB,MAAK,SAAAC,GAClBC,YAAW,WACPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAGd,UAER,CAACrB,IAEGsB,EDd0BM,CAAa5B,GAAjCa,EAAb,EAAQN,KAAac,EAArB,EAAqBA,QAGrB,OAFAQ,QAAQC,IAAIjB,GAGR,mCACI,qBAAIf,UAAU,kBAAd,UACI,oBAAIA,UAAU,+CAAd,SAA+DE,IAC7DqB,GAAW,2CACb,qBAAKvB,UAAU,YAAf,SAEQe,EAAOJ,KAAI,SAAAsB,GAAK,OACZ,wBAAC,EAAD,2BAAkBA,GAAlB,IAA0BC,IAAMD,EAAMpB,aANhBX,MEWnCiC,EApBM,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EAEjD,EAAoCjD,mBAASiD,GAA7C,mBAAOzC,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BACMS,EAAWgB,KAAI,SAAAT,GAAQ,OACjB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCXlCmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.507a2e91.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) =>{\n        setInputValue(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            // Con el arrow function categories es el estado actual del setCategories, asi se hacia sin tener que exportar la variable categories\n            setCategories(categories => [inputValue, ...categories]);\n            setInputValue('')\n        }\n    }\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n            <p className=\"preview\">{ inputValue }</p>\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\nexport default AddCategory","export const getGif = async(category) => {\n    const giftCuantity = 10;\n    const url  = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=${ giftCuantity }&api_key=sgatASouL6QA0OloiTwxS5gAVHGXDGET`;\n    const anwer = await fetch(url);\n    const { data } = await anwer.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <a href={ url } target='_blank' rel='noreferrer' className=\"card card-background\">\n            <div className=\"animate__animated animate__fadeIn\">\n                <img src={ url } alt={ title } />\n                <p>{ title }</p>\n            </div>\n        </a>\n    )\n}\n\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\nimport PropTypes from 'prop-types';\n\nexport const GifGrid = ({ category }) => {\n    // key: sgatASouL6QA0OloiTwxS5gAVHGXDGET\n    // const [images, setImages] = useState([])\n    const { data:images, loading } = useFetchGifs(category);\n    console.log(images);\n\n    return (\n        <>\n            <li className=\"cards-container\" key={ category }>\n                <h3 className=\"animate__animated animate__fadeIn card-title\">{ category }</h3>\n                { loading && <p>Loading...</p> }\n                <div className=\"card-grid\">\n                    { \n                        images.map(image => \n                            <GifGridItem { ...image } key={ image.id } />\n                        )\n                    }\n                </div>\n            </li>\n        </>\n    )\n}\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}","import { useState, useEffect } from \"react\"\nimport { getGif } from \"../helpers/getGifs\"\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGif(category).then(imgs => {\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n\n            }, 500)\n        })\n    }, [category])\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nconst GifFinderApp = ({ defaultCategories = [] }) => {\n\n    const [categories, setCategories] = useState(defaultCategories)\n    \n    return (\n        <>\n            <h2>GiftFinderApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n            <ul>\n                { categories.map(category => \n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                ) }\n            </ul>\n        </>\n    )\n}\nexport default GifFinderApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifFinderApp from './GifFinderApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifFinderApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}